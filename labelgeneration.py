# -*- coding: utf-8 -*-
"""LabelGeneration.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SXXEt-LxhPJxpaPZN2GmiLpcXsYJJeho
"""

import os
import pandas as pd
import numpy as np
from google.colab import drive
drive.mount('/content/drive')

directory = "/content/drive/MyDrive/NICHackathon/filtered_data/filtered_data/press_conference/"

print(os.listdir(directory))
csv_files = [os.path.join(directory, file) for file in os.listdir(directory) if file.endswith('.csv')]

print(csv_files)

import re
from datetime import datetime

!pip install re

file_path = csv_files[0]
pattern = r'(\d{8})_select_filtered\.csv'
print(file_path)
match = re.search(pattern, file_path)
print(match)
match.group(1)

import openpyxl
# Load and concatenate all Excel files into a single DataFrame
dataframes = pd.DataFrame()
pattern = r'(\d{8})_select_filtered\.csv'
for file in csv_files:
  match = re.search(pattern, file)
  date_string = match.group(1)
  date_object = datetime.strptime(date_string, '%Y%m%d')
  formatted_date = date_object.strftime('%Y-%m-%d')
  df = pd.read_csv(file)
  df['date'] = formatted_date
  dataframes = pd.concat([dataframes, df], axis=0, ignore_index=True)
# data = pd.concat(dataframes, ignore_index=True)
# dataframes = [pd.read_csv(file) for file in csv_files]
# data = pd.concat(dataframes, ignore_index=True)

# df = data.copy()
# Check the data
dataframes

dataframes.drop(['Unnamed: 0'], axis=1, inplace=True)

dataframes

dataframes.to_csv('/content/drive/MyDrive/NICHackathon/filtered_data/filtered_data/press_conference/combinedwithdates.csv', index=False)  # Update with the desired path

!pip install transformers

# Load the tokenizer
from transformers import RobertaTokenizer, RobertaForSequenceClassification, pipeline

tokenizer = RobertaTokenizer.from_pretrained("roberta-large")

# Load the fine-tuned models
# model_hawk = RobertaForSequenceClassification.from_pretrained('/content/drive/MyDrive/NICHackathon/finetuned_roberta_large_Hawk')
# model_stability = RobertaForSequenceClassification.from_pretrained('/content/drive/MyDrive/NICHackathon/finetuned_roberta_large_stability_')
model_trust = RobertaForSequenceClassification.from_pretrained('/content/drive/MyDrive/NICHackathon/finetuned_roberta_large_trust_2')

# Create pipelines for each model
# pipe_hawk = pipeline('text-classification', model=model_hawk, tokenizer=tokenizer, return_all_scores=True)
# pipe_stability = pipeline('text-classification', model=model_stability, tokenizer=tokenizer, return_all_scores=True)
pipe_trust = pipeline('text-classification', model=model_trust, tokenizer=tokenizer, return_all_scores=True)

# Function to classify a sentence with a given pipeline
def classify_sentence_hawk(pipeline, sentence):
    prompt = ("Discard all the previous instructions. Behave like you are an expert sentence classifier. "
              "Classify the following sentence from FOMC into 'NEUTRAL', 'HAWKISH', or 'DOVISH'. "
              "Label 'NEUTRAL' if the stance is clearly not neutral and the sentence has no effect, "
              "'HAWKISH' if it is corresponding to tightening of the monetary policy, or 'DOVISH' "
              "if it is corresponding to easing of the monetary policy. Provide the label in the first "
              "line and provide a short explanation in the second line. The sentence: " + sentence)

    result = pipeline(prompt)[0]
    # best_label = max(result, key=lambda x: x['score'])
    # label = best_label['label']
    # score = best_label['score']
    # return label, score
    label_map = {'LABEL_0': 'NEUTRAL', 'LABEL_1': 'HAWKISH', 'LABEL_2': 'DOVISH'}
    # Find the label with the highest score
    best_label = max(result, key=lambda x: x['score'])
    label = label_map[best_label['label']]
    score = best_label['score']
    return label, score
def classify_sentence_trust(pipeline, sentence):
    message = ("Discard all the previous instructions. Behave like you are an expert sentence classifier. Classify the following sentence from FOMC into 'TRUST', 'MISTRUST', or 'NEUTRAL' class. Label 'TRUST' if it the sentence has a positive effect on public trust and confidence of policies, 'MISTRUST' if the sentence has a negative effect on public trust of the FOMC , or 'NEUTRAL' if the stance is neutral. Provide the label in the first line and provide a short explanation in the second line. The sentence: " + sentence)
    result = pipeline(message)[0]
    label_map = {'LABEL_0': 'TRUST', 'LABEL_1': 'MISTRUST', 'LABEL_2': 'NEUTRAL'}
    # Find the label with the highest score
    best_label = max(result, key=lambda x: x['score'])
    label = label_map[best_label['label']]
    score = best_label['score']
    return label, score
    # best_label = max(result, key=lambda x: x['score'])
    # label = best_label['label']
    # score = best_label['score']
    # return label, score
def classify_sentence_stability(pipeline, sentence):
    message = ("Discard all the previous instructions. Behave like you are an expert sentence classifier. Classify the following sentence from FOMC into 'STABLE', 'VOLATILE', 'NO-EFFECT'. Label 'STABLE' if the sentence has underlying implications of an incoming stable market, 'VOLATILE' if it implies uncertainty in the market is expected in the future, and 'NO-EFFECT' only if the sentence is a filler and sentence has no implications. Provide the label in the first line and provide a short explanation in the second line. The sentence: " + sentence)
    result = pipeline(message)[0]
    label_map = {'LABEL_0': 'STABLE', 'LABEL_1': 'VOLATILE', 'LABEL_2': 'NO-EFFECT'}
    # Find the label with the highest score
    best_label = max(result, key=lambda x: x['score'])
    label = label_map[best_label['label']]
    score = best_label['score']
    return label, score
    # best_label = max(result, key=lambda x: x['score'])
    # label = best_label['label']
    # score = best_label['score']
    # return label, score

# Load the input DataFrame
input_df = pd.read_csv('/content/drive/MyDrive/NICHackathon/filtered_data/filtered_data/press_conference/combinedwithdates.csv')  # Update with the correct path to your CSV file

# Prepare DataFrames to store results
results_hawk = []
results_stability = []
# results_trust = []

# Classify sentences using each model
for idx, row in input_df.iterrows():
    if idx < 4500:
      continue
    if idx > 0 and idx % 500 == 0:
      # Save the results to CSV files
      df_hawk = pd.DataFrame(results_hawk)
      df_stability = pd.DataFrame(results_stability)
      # df_trust = pd.DataFrame(results_trust)

      df_hawk.to_csv('/content/drive/MyDrive/NICHackathon/filtered_data/filtered_data/press_conference/hawk_results2.csv', index=False)  # Update with the desired path
      df_stability.to_csv('/content/drive/MyDrive/NICHackathon/filtered_data/filtered_data/press_conference/stability_results2.csv', index=False)  # Update with the desired path
      # df_trust.to_csv('/content/drive/MyDrive/NICHackathon/filtered_data/filtered_data/press_conference/trust_results.csv', index=False)  # Update with the desired path
      print(f"Saved results at iteration {idx}")

    sentence = row['sentence']
    date = row['date']

    try:
        label_hawk, score_hawk = classify_sentence_hawk(pipe_hawk, sentence)
        results_hawk.append({'sentence': sentence, 'date': date, 'label': label_hawk, 'score': score_hawk})
    except Exception as e:
        print(f"Error processing hawk at index {idx}: {e}")
        continue
    try:
      label_stability, score_stability = classify_sentence_stability(pipe_stability, sentence)
      # print(label_stability, score_stability)
      results_stability.append({'sentence': sentence, 'date': date, 'label': label_stability, 'score': score_stability})
    except Exception as e:
        print(f"Error processing hawk at index {idx}: {e}")
        continue
    # try:
    #   label_trust, score_trust = classify_sentence_trust(pipe_trust, sentence)
    #   # print(label_trust, score_trust)
    #   results_trust.append({'sentence': sentence, 'date': date, 'label': label_trust, 'score': score_trust})
    # except Exception as e:
    #     print(f"Error processing hawk at index {idx}: {e}")
    #     continue

    # label_hawk, score_hawk = classify_sentence_hawk(pipe_hawk, sentence)
    # # print(label_hawk, score_hawk)
    # results_hawk.append({'sentence': sentence, 'date': date, 'label': label_hawk, 'score': score_hawk})

    # label_stability, score_stability = classify_sentence_stability(pipe_stability, sentence)
    # # print(label_stability, score_stability)
    # results_stability.append({'sentence': sentence, 'date': date, 'label': label_stability, 'score': score_stability})

    # label_trust, score_trust = classify_sentence_trust(pipe_trust, sentence)
    # # print(label_trust, score_trust)
    # results_trust.append({'sentence': sentence, 'date': date, 'label': label_trust, 'score': score_trust})

# Create separate DataFrames for each model's results
df_hawk = pd.DataFrame(results_hawk)
df_stability = pd.DataFrame(results_stability)
# df_trust = pd.DataFrame(results_trust)

# Save the results to CSV files
df_hawk.to_csv('/content/drive/MyDrive/NICHackathon/filtered_data/filtered_data/press_conference/hawk_results2.csv', index=False)  # Update with the desired path
df_stability.to_csv('/content/drive/MyDrive/NICHackathon/filtered_data/filtered_data/press_conference/stability_results2.csv', index=False)  # Update with the desired path
# df_trust.to_csv('/content/drive/MyDrive/NICHackathon/filtered_data/filtered_data/press_conference/trust_results.csv', index=False)  # Update with the desired path

# Load the input DataFrame
input_df = pd.read_csv('/content/drive/MyDrive/NICHackathon/filtered_data/filtered_data/press_conference/combinedwithdates.csv')  # Update with the correct path to your CSV file

# Prepare DataFrames to store results
# results_hawk = []
# results_stability = []
results_trust = []

# Classify sentences using each model
for idx, row in input_df.iterrows():
    if idx > 0 and idx % 500 == 0:
      # Save the results to CSV files
      # df_hawk = pd.DataFrame(results_hawk)
      # df_stability = pd.DataFrame(results_stability)
      df_trust = pd.DataFrame(results_trust)

      # df_hawk.to_csv('/content/drive/MyDrive/NICHackathon/filtered_data/filtered_data/press_conference/hawk_results2.csv', index=False)  # Update with the desired path
      # df_stability.to_csv('/content/drive/MyDrive/NICHackathon/filtered_data/filtered_data/press_conference/stability_results2.csv', index=False)  # Update with the desired path
      df_trust.to_csv('/content/drive/MyDrive/NICHackathon/filtered_data/filtered_data/press_conference/trust_results.csv', index=False)  # Update with the desired path
      print(f"Saved results at iteration {idx}")

    sentence = row['sentence']
    date = row['date']

    # try:
    #     label_hawk, score_hawk = classify_sentence_hawk(pipe_hawk, sentence)
    #     results_hawk.append({'sentence': sentence, 'date': date, 'label': label_hawk, 'score': score_hawk})
    # except Exception as e:
    #     print(f"Error processing hawk at index {idx}: {e}")
    #     continue
    # try:
    #   label_stability, score_stability = classify_sentence_stability(pipe_stability, sentence)
    #   # print(label_stability, score_stability)
    #   results_stability.append({'sentence': sentence, 'date': date, 'label': label_stability, 'score': score_stability})
    # except Exception as e:
    #     print(f"Error processing hawk at index {idx}: {e}")
    #     continue
    try:
      label_trust, score_trust = classify_sentence_trust(pipe_trust, sentence)
      # print(label_trust, score_trust)
      results_trust.append({'sentence': sentence, 'date': date, 'label': label_trust, 'score': score_trust})
    except Exception as e:
        print(f"Error processing hawk at index {idx}: {e}")
        continue

    # label_hawk, score_hawk = classify_sentence_hawk(pipe_hawk, sentence)
    # # print(label_hawk, score_hawk)
    # results_hawk.append({'sentence': sentence, 'date': date, 'label': label_hawk, 'score': score_hawk})

    # label_stability, score_stability = classify_sentence_stability(pipe_stability, sentence)
    # # print(label_stability, score_stability)
    # results_stability.append({'sentence': sentence, 'date': date, 'label': label_stability, 'score': score_stability})

    # label_trust, score_trust = classify_sentence_trust(pipe_trust, sentence)
    # # print(label_trust, score_trust)
    # results_trust.append({'sentence': sentence, 'date': date, 'label': label_trust, 'score': score_trust})

# Create separate DataFrames for each model's results
# df_hawk = pd.DataFrame(results_hawk)
# df_stability = pd.DataFrame(results_stability)
# df_trust = pd.DataFrame(results_trust)

# Save the results to CSV files
# df_hawk.to_csv('/content/drive/MyDrive/NICHackathon/filtered_data/filtered_data/press_conference/hawk_results2.csv', index=False)  # Update with the desired path
# df_stability.to_csv('/content/drive/MyDrive/NICHackathon/filtered_data/filtered_data/press_conference/stability_results2.csv', index=False)  # Update with the desired path
df_trust.to_csv('/content/drive/MyDrive/NICHackathon/filtered_data/filtered_data/press_conference/trust_results.csv', index=False)  # Update with the desired path

# Load the input DataFrame
input_df = pd.read_csv('/content/drive/MyDrive/NICHackathon/filtered_data/filtered_data/meeting_minutes/combinedwithdates.csv')  # Update with the correct path to your CSV file

# Prepare DataFrames to store results
# results_hawk = []
# results_stability = []
results_trust = []

for idx, row in input_df.iterrows():
    # if idx < 4000:
    #   continue
    if idx > 0 and idx % 500 == 0:
      # Save the results to CSV files
      # df_hawk = pd.DataFrame(results_hawk)
      # df_stability = pd.DataFrame(results_stability)
      df_trust = pd.DataFrame(results_trust)

      # df_hawk.to_csv('/content/drive/MyDrive/NICHackathon/filtered_data/filtered_data/meeting_minutes/hawk_results2.csv', index=False)  # Update with the desired path
      # df_stability.to_csv('/content/drive/MyDrive/NICHackathon/filtered_data/filtered_data/meeting_minutes/stability_results2.csv', index=False)  # Update with the desired path
      df_trust.to_csv('/content/drive/MyDrive/NICHackathon/filtered_data/filtered_data/meeting_minutes/trust_results.csv', index=False)  # Update with the desired path
      print(f"Saved results at iteration {idx}")

    sentence = row['sentence']
    date = row['date']

    # try:
    #     label_hawk, score_hawk = classify_sentence_hawk(pipe_hawk, sentence)
    #     results_hawk.append({'sentence': sentence, 'date': date, 'label': label_hawk, 'score': score_hawk})
    # except Exception as e:
    #     print(f"Error processing hawk at index {idx}: {e}")
    #     continue
    # try:
    #   label_stability, score_stability = classify_sentence_stability(pipe_stability, sentence)
    #   # print(label_stability, score_stability)
    #   results_stability.append({'sentence': sentence, 'date': date, 'label': label_stability, 'score': score_stability})
    # except Exception as e:
    #     print(f"Error processing hawk at index {idx}: {e}")
        # continue
    try:
      label_trust, score_trust = classify_sentence_trust(pipe_trust, sentence)
      # print(label_trust, score_trust)
      results_trust.append({'sentence': sentence, 'date': date, 'label': label_trust, 'score': score_trust})
    except Exception as e:
        print(f"Error processing hawk at index {idx}: {e}")
        continue

# Classify sentences using each model
# for idx, row in input_df.iterrows():
#     sentence = row['sentence']
#     date = row['date']

#     label_hawk, score_hawk = classify_sentence_hawk(pipe_hawk, sentence)
#     # print(label_hawk, score_hawk)
#     results_hawk.append({'sentence': sentence, 'date': date, 'label': label_hawk, 'score': score_hawk})

#     label_stability, score_stability = classify_sentence_stability(pipe_stability, sentence)
#     # print(label_stability, score_stability)
#     results_stability.append({'sentence': sentence, 'date': date, 'label': label_stability, 'score': score_stability})

#     label_trust, score_trust = classify_sentence_trust(pipe_trust, sentence)
#     # print(label_trust, score_trust)
#     results_trust.append({'sentence': sentence, 'date': date, 'label': label_trust, 'score': score_trust})

# Create separate DataFrames for each model's results
# df_hawk = pd.DataFrame(results_hawk)
# df_stability = pd.DataFrame(results_stability)
df_trust = pd.DataFrame(results_trust)

# Save the results to CSV files
# df_hawk.to_csv('/content/drive/MyDrive/NICHackathon/filtered_data/filtered_data/meeting_minutes/hawk_results2.csv', index=False)  # Update with the desired path
# df_stability.to_csv('/content/drive/MyDrive/NICHackathon/filtered_data/filtered_data/meeting_minutes/stability_results2.csv', index=False)  # Update with the desired path
df_trust.to_csv('/content/drive/MyDrive/NICHackathon/filtered_data/filtered_data/meeting_minutes/trust_results.csv', index=False)  # Update with the desired path

input_df = pd.read_csv('/content/drive/MyDrive/NICHackathon/filtered_data/filtered_data/speech/select/combinedwithdates.csv')  # Update with the correct path to your CSV file

# Prepare DataFrames to store results
# results_hawk = []
# results_stability = []
results_trust = []

# Process the input DataFrame and save results every 1000 iterations
for idx, row in input_df.iterrows():
    # if idx <1000:
    #     continue
    # print(idx)
    if idx > 0 and idx % 500 == 0:
        # Save the results to CSV files
        # df_hawk = pd.DataFrame(results_hawk)
        # df_stability = pd.DataFrame(results_stability)
        df_trust = pd.DataFrame(results_trust)

        # df_hawk.to_csv('/content/drive/MyDrive/NICHackathon/filtered_data/filtered_data/speech/select/hawk_results2.csv', index=False)
        # df_stability.to_csv('/content/drive/MyDrive/NICHackathon/filtered_data/filtered_data/speech/select/stability_results2.csv', index=False)
        df_trust.to_csv('/content/drive/MyDrive/NICHackathon/filtered_data/filtered_data/speech/select/trust_results.csv', index=False)

        print(f"Saved results at iteration {idx}")

    sentence = row['sentence']
    date = row['date']

    # try:
    #     label_hawk, score_hawk = classify_sentence_hawk(pipe_hawk, sentence)
    #     results_hawk.append({'sentence': sentence, 'date': date, 'label': label_hawk, 'score': score_hawk})
    # except Exception as e:
    #     print(f"Error processing hawk at index {idx}: {e}")
    #     continue

    # try:
    #     label_stability, score_stability = classify_sentence_stability(pipe_stability, sentence)
    #     results_stability.append({'sentence': sentence, 'date': date, 'label': label_stability, 'score': score_stability})
    # except Exception as e:
    #     print(f"Error processing stability at index {idx}: {e}")
    #     continue

    try:
        label_trust, score_trust = classify_sentence_trust(pipe_trust, sentence)
        results_trust.append({'sentence': sentence, 'date': date, 'label': label_trust, 'score': score_trust})
    except Exception as e:
        print(f"Error processing trust at index {idx}: {e}")
        continue

# Save the final results to CSV files
# df_hawk = pd.DataFrame(results_hawk)
# df_stability = pd.DataFrame(results_stability)
df_trust = pd.DataFrame(results_trust)

# df_hawk.to_csv('/content/drive/MyDrive/NICHackathon/filtered_data/filtered_data/speech/select/hawk_results_final2.csv', index=False)
# df_stability.to_csv('/content/drive/MyDrive/NICHackathon/filtered_data/filtered_data/speech/select/stability_results_final2.csv', index=False)
df_trust.to_csv('/content/drive/MyDrive/NICHackathon/filtered_data/filtered_data/speech/select/trust_results_final.csv', index=False)

print("Processing complete and final results saved.")


# # Load the input DataFrame
# input_df = pd.read_csv('/content/drive/MyDrive/NICHackathon/filtered_data/filtered_data/speech/select/combinedwithdates.csv')  # Update with the correct path to your CSV file

# # Prepare DataFrames to store results
# results_hawk = []
# results_stability = []
# results_trust = []

# # Classify sentences using each model
# for idx, row in input_df.iterrows():
#     sentence = row['sentence']
#     date = row['date']

#     label_hawk, score_hawk = classify_sentence_hawk(pipe_hawk, sentence)
#     # print(label_hawk, score_hawk)
#     results_hawk.append({'sentence': sentence, 'date': date, 'label': label_hawk, 'score': score_hawk})

#     label_stability, score_stability = classify_sentence_stability(pipe_stability, sentence)
#     # print(label_stability, score_stability)
#     results_stability.append({'sentence': sentence, 'date': date, 'label': label_stability, 'score': score_stability})

#     label_trust, score_trust = classify_sentence_trust(pipe_trust, sentence)
#     # print(label_trust, score_trust)
#     results_trust.append({'sentence': sentence, 'date': date, 'label': label_trust, 'score': score_trust})

# # Create separate DataFrames for each model's results
# df_hawk = pd.DataFrame(results_hawk)
# df_stability = pd.DataFrame(results_stability)
# df_trust = pd.DataFrame(results_trust)

# # Save the results to CSV files
# df_hawk.to_csv('/content/drive/MyDrive/NICHackathon/filtered_data/filtered_data/speech/select/hawk_results.csv', index=False)  # Update with the desired path
# df_stability.to_csv('/content/drive/MyDrive/NICHackathon/filtered_data/filtered_data/speech/select/stability_results.csv', index=False)  # Update with the desired path
# df_trust.to_csv('/content/drive/MyDrive/NICHackathon/filtered_data/filtered_data/speech/select/trust_results.csv', index=False)  # Update with the desired path